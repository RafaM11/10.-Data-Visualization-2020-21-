var _d = require("d3");
var _topojsonClient = require("topojson-client");
var _communities = require("./communities");
var _stats = require("./stats");
const spainjson = require("./spain.json");
const d3Composite = require("d3-composite-projections");
const maxAffected = s => {
  const max = s.reduce((max, item) => item.value > max ? item.value : max, 0);
  return max;
};
const calculateRadiusBasedOnAffectedCases = (comunidad, s) => {
  const entry = s.find(item => item.name === comunidad);
  const affectedRadiusScale = _d.scaleLinear().domain([0, maxAffected(s)]).range([0, 50]);
  return entry ? affectedRadiusScale(entry.value) : 0;
};
const aProjection = d3Composite.geoConicConformalSpain().scale(3300).translate([500, 400]);
const geoPath = _d.geoPath().projection(aProjection);
const geojson = _topojsonClient.feature(spainjson, spainjson.objects.ESP_adm1);
const svg = _d.select("body").append("svg").attr("width", 1024).attr("height", 800).attr("style", "background-color: #FBFAF0");
svg.selectAll("path").data(geojson["features"]).enter().append("path").attr("class", "country").attr("d", geoPath);
svg.selectAll("circle").data(_communities.latLongCommunities).enter().append("circle").attr("class", "affected-marker").attr("r", d => calculateRadiusBasedOnAffectedCases(d.name, _stats.statsIni)).attr("cx", d => aProjection([d.long, d.lat])[0]).attr("cy", d => aProjection([d.long, d.lat])[1]);
const updateRadius = data => {
  _d.selectAll("circle").data(_communities.latLongCommunities).transition().duration(500).attr("class", "affected-marker").attr("r", d => calculateRadiusBasedOnAffectedCases(d.name, data)).attr("cx", d => aProjection([d.long, d.lat])[0]).attr("cy", d => aProjection([d.long, d.lat])[1]);
};
document.getElementById("Inicio").addEventListener("click", function handlResultsIni() {
  updateRadius(_stats.statsIni);
});
document.getElementById("Final").addEventListener("click", function handlResultsFinal() {
  updateRadius(_stats.statsLast);
});
